@page "/registration"
@using System.Security.Claims
@using System.ComponentModel.DataAnnotations
@inject NavigationManager navManager
@rendermode InteractiveServer

<div>
    <div class="registration-logo-container">
        <img class="registration-logo" src="Resources/logo-photoservice.png"/>
    </div>
    <div class="container-md container-for-registration-page">
        <h2 class="registration-title">Регистрация</h2>
        <div class="btn-group registration-tabs">
            <a href="registration" class="btn btn-primary active сustomer-tab" aria-current="page">Заказчик</a>
            <a href="registration-executor" class="btn btn-primary executor-tab">Исполнитель</a>
        </div>
        <EditForm Model="@registrationModel" class="row g-3 registration-form" OnValidSubmit="Register" FormName="Authentication">
            <DataAnnotationsValidator/>
            <div class="col-12">
                <label for="inputName" class="form-label registration-form">Как к Вам обращаться?</label>
                <InputText id="inputName" class="form-control" @bind-Value="@registrationModel.Name" type="text" placeholder="Введите имя*" required pattern="@NamePattern"/>
                <div id="nameHelp" class="form-text" style="font-style: italic;">*не менее двух и не более трёх слов кириллицей через пробел.</div>
            </div>
            <div class="col-md-12">
                <label for="inputEmail" class="form-label">Ваш электронный адрес</label>
                <InputText id="inputEmail" class="form-control" @bind-Value="@registrationModel.Mail" type="email" placeholder="Введите почту в формате 'user@example.com'" required pattern="@EmailPattern"/>
            </div>
            <div class="col-md-6">
                <label for="inputPassword" class="form-label">Пароль</label>
                <InputText id="inputPassword" class="form-control" @bind-Value="@registrationModel.Password" type="password" placeholder="Задайте пароль*"/>
                <ValidationMessage For="@(() => registrationModel.Password)"/>
            </div>
            <div class="col-md-6">
                <label for="inputPasswordCheck" class="form-label">Проверка пароля</label>
                <InputText id="inputPasswordCheck" class="form-control" @bind-Value="@registrationModel.PasswordConfirmation" type="password" placeholder="Повторите пароль"/>
                <ValidationMessage For="@(() => registrationModel.PasswordConfirmation)"/>
            </div>
            <div id="passwordHelp" class="form-text" style="font-style: italic;">*в формате 'passWord123' (6-20 символов, как минимум по одной цифре и букве из верхнего и нижнего регистров).</div>
            <div class="d-grid gap-2">
                <button type="submit" class="btn btn-primary btn-lg registration-button">Зарегистрироваться</button>
            </div>
        </EditForm>
    </div>
</div>


@code {

    private string NamePattern => @"^([а-яА-ЯёЁ]{2,15}\s){1,2}[а-яА-ЯёЁ]{2,15}$";
    private string EmailPattern => @"^\S+@\S+\.\S{2,10}$";

    private RegistrationModel registrationModel = new RegistrationModel();

    public class RegistrationModel
    {
        public string Name { get; set; }
        public string Mail { get; set; }

        [Required(ErrorMessage = "Поле 'Пароль' обязательно для заполнения")]
        [RegularExpression(@"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[A-Za-z\d]{6,20}$",
            ErrorMessage = "Должен содержать от 6 до 20 символов, включать арабские цифры, строчные и прописные буквы.")]
        public string Password { get; set; }

        [Required(ErrorMessage = "Поле 'Подтверждение пароля' обязательно для заполнения")]
        [Compare(nameof(Password), ErrorMessage = "Пароли не совпадают")]
        public string PasswordConfirmation { get; set; }
    }

    [SupplyParameterFromForm] 
    public UserInputModel UserInputModel { get; set; } = new UserInputModel();

    [CascadingParameter] 
    public HttpContext httpContext { get; set; }

    public async Task StartLogin()
    {
        var claims = new List<Claim>()
        {
            new Claim(ClaimTypes.Email, UserInputModel.Mail),
        };

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var customer = new ClaimsPrincipal(identity);

        await httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, customer);
    }

    private void Register()
    {
        UserInputModel userInputModel = new UserInputModel()
        {
            Name = registrationModel.Name,
            Mail = registrationModel.Mail.ToLower(),
            Password = registrationModel.Password,

            Role = SingletoneStorage.GetStorage().Storage.Roles.FirstOrDefault(r => r.Id == 3)
        };

        UserClient userClient = new UserClient();
        userClient.AddUser(userInputModel);
        
        navManager.NavigateTo("/services");
        
        StartLogin();
    }

}