@page "/authorization"
@using System.Security.Claims
@using PhotoService.DAL.DTO
@inject NavigationManager navManager

<div>
    <div class="authorization-logo-container">
        <img class="authorization-logo" src="Resources/logo-photoservice.png"/>
    </div>
    <div class="container-md container-for-authorization-page">
        <h2 class="authorization-title">Вход</h2>
        <EditForm Model="LoginInputModel" OnSubmit="StartLogin" FormName="Authentication">
            <div class="mb-3">
                <label for="exampleInputEmail1" class="form-label">Электронная почта</label>
                @* <div id="emailHelp" class="form-text">Введите адрес электронной почты в формате "user@example.com".</div> *@
                <InputText class="form-control" id="exampleInputEmail1" aria-describedby="emailHelp" placeholder="Введите электронную почту" @bind-Value="LoginInputModel.Mail" required pattern="@EmailPattern">
                </InputText>
                <div id="emailHelp" class="form-text">Мы никогда-никода никому-никому не передадим вашу электронную почту может быть, наверное, скорее всего передадим.</div>
                <ValidationMessage For="@(() => LoginInputModel.Mail)">Введите адрес электронной почты в формате "user@example.com".</ValidationMessage>
            </div>
            <div class="mb-3">
                <label for="exampleInputPassword1" class="form-label">Пароль</label>
                @* <div id="emailHelp" class="form-text">Ваш пароль должен содержать от 6 до 20 символов и хотя бы по одной цифре и букве из верхнего и нижнего регистров. Например, "Password123".</div> *@
                <InputText class="form-control" id="exampleInputPassword1" placeholder="Введите пароль" @bind-Value="LoginInputModel.Password" required pattern="@PasswordPattern">
                </InputText>
                <div id="emailHelp" class="form-text">Как и пароль. Наверное.</div>
                <ValidationMessage For="@(() => LoginInputModel.Password)">Пароль должен содержать от 6 до 20 символов и хотя бы по одной цифре и букве из верхнего и нижнего регистров. Например, "Password123".</ValidationMessage>
            </div>
            <div class="d-grid gap-2">
                <button type="submit" class="btn btn-primary btn-lg authorization-button">Войти</button>
            </div>
        </EditForm>
        @if (authenticationFailed)
        {
            <div class="alert alert-danger" role="alert">
                Аутентификация не удалась. Проверьте свои учетные данные и повторите попытку.
            </div>
        }
    </div>
</div>


@code {

    private string EmailPattern => @"^\S+@\S+\.\S{2,10}$";
    private string PasswordPattern => @"^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)[A-Za-z\d]{6,20}$";

    [Inject] 
    private IHttpContextAccessor HttpContextAccessor { get; set; }

    private HttpContext httpContext => HttpContextAccessor.HttpContext;

    private bool authenticationFailed = false;

    [SupplyParameterFromForm] 
    public LoginInputModel LoginInputModel { get; set; } = new LoginInputModel();

    public async Task StartLogin()
    {
        RoleClient roleClient = new RoleClient();
        RolesDto userRole = roleClient.GetRoleByEmail(LoginInputModel.Mail);

        if (userRole == null)
        {
            authenticationFailed = true;
            return;
        }

        var claims = new List<Claim>()
        {
            new Claim(ClaimTypes.Email, LoginInputModel.Mail),
            new Claim(ClaimTypes.Role, userRole.Title)
        };

        UserClient userClient = new UserClient();

        bool check = userClient.CheckAuthentication(LoginInputModel);
        if (!check)
        {
            authenticationFailed = true;
            return;
        }

        var userName = userClient.GetUserNameByEmail(LoginInputModel.Mail);
        if (!string.IsNullOrEmpty(userName))
        {
            claims.Add(new Claim(ClaimTypes.Name, userName));
        }

        var userId = userClient.GetUserIdByEmail(LoginInputModel.Mail);
        if (userId != default(int))
        {
            claims.Add(new Claim(ClaimTypes.NameIdentifier, userId.ToString()));
        }

        string redirectTo = null;

        switch (userRole?.Title)
        {
            case "Менеджер":
                redirectTo = "/customers";
                break;
            case "Исполнитель":
                redirectTo = "/my-services";
                break;
            case "Заказчик":
                redirectTo = "/services";
                break;
            default:
                authenticationFailed = true;
                return;
        }

        var identity = new ClaimsIdentity(claims, CookieAuthenticationDefaults.AuthenticationScheme);
        var user = new ClaimsPrincipal(identity);

        await httpContext.SignInAsync(CookieAuthenticationDefaults.AuthenticationScheme, user);

        if (!string.IsNullOrEmpty(redirectTo))
        {
            navManager.NavigateTo(redirectTo);
        }
    }

}