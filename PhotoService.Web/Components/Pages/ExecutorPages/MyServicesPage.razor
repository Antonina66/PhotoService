@page "/my-services"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@rendermode InteractiveServer
@attribute [StreamRendering]
@inject AuthenticationStateProvider AuthenticationStateProvider

<AuthorizeView Roles="Исполнитель">
    <Authorized>
        Вы авторизовались как @userRole.
        <p> Привет, @userName!</p>
    </Authorized>
    <NotAuthorized>
        Ошибка. Проверьте актуальность вводимых данных.
    </NotAuthorized>
</AuthorizeView>


<PageTitle>Мои услуги</PageTitle>

<div class="d-flex flex-row justify-content-between mb-4">
    <h2>Мои услуги</h2>
    <AddServiceModal/>
</div>
@if (Services != null)
{
    <MyServicesCard/>
}
else
{
    <p style="display: flex; justify-content: center; align-items: center; height: 10rem">Нет ни одной услуги</p>
}


@code {

    [CascadingParameter] public Task<AuthenticationState> State { get; set; }

    private string userName;
    private string userRole;
    private int id;

    protected override async Task OnInitializedAsync()
    {
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            userName = user.FindFirst(ClaimTypes.Name)?.Value;
            userRole = user.FindFirst(ClaimTypes.Role)?.Value;
        }
    }

    [Parameter] public int Id { get; set; }
    [Parameter] public string? Name { get; set; }
    [Parameter] public string? Description { get; set; }
    [Parameter] public int Cost { get; set; }

    [Parameter] 
    public List<ServiceOutputModel> Services { get; set; }
    

}