@page "/my-services"
@using Microsoft.AspNetCore.Components.Authorization
@using System.Security.Claims
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer
@attribute [StreamRendering]

<AuthorizeView Roles="Исполнитель">
    <Authorized>
        <MyServicesPage/>
        Вы авторизовались как исполнитель.
        @* <p> Привет, @claims.Where(c=>c.Type == nameof(LoginModel))</p> *@
        @* @if (claims.Count() > 0) *@
        @* { *@
        @*     <ul> *@
        @*         @foreach (var claim in claims) *@
        @*         { *@
        @*             <li>@claim.Type: @claim.Value</li> *@
        @*         } *@
        @*     </ul> *@
        @* } *@
    </Authorized>
    @* <NotAuthorized> *@
    @*     <MainPage/> *@
    @*     Ошибка. Проверьте актуальность вводимых данных. *@
    @* </NotAuthorized> *@
</AuthorizeView>


<PageTitle>Мои услуги</PageTitle>

<div class="d-flex flex-row justify-content-between">
    <h2>Мои услуги</h2>
    <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#exampleModal" style="background-color: #4340D2">
        <i class="bi bi-plus"></i>
        Добавить
    </button>
</div>
<div class="modal fade" id="exampleModal" tabindex="-1" aria-labelledby="exampleModalLabel" aria-hidden="true">
    <AddServiceModal AddService="AddService" />
</div>

<div class="row row-cols-1 row-cols-md-3 g-3 mt-2">
<<<<<<< HEAD
    <ServiceCardsForPage/>
    <ServiceCardsForPage/>
    <ServiceCardsForPage/>
    <ServiceCardsForPage/>
</div>


@code {

    [CascadingParameter] 
    public Task<AuthenticationState> State { get; set; }

    private List<Claim> claims = new List<Claim>();

    // private async Task GetClaimsPrincipalData()
    // {
    //     var authState = await State;
    //     var user = authState.User;
    //
    //     if (user.Identity is not null && user.Identity.IsAuthenticated)
    //     {
    //         claims = user.Claims.ToList();
    //     }
    // }

}
=======
    @foreach (var Service in Services)
    {
       <MyServicesCard Service="Service" DeleteService="DeleteService"/>
    }
</div>

@code
{
    [Parameter] public int Id { get; set; }
    [Parameter] public string? Name { get; set; }
    [Parameter] public string? Description { get; set; }
    [Parameter] public int Cost { get; set; }
    
    [Parameter] public List<ServiceOutputModel> Services { get; set; }
    private IServiceClient _serviceClient;
    
    private ServiceInputModel _inputService;
    
    public MyServicesPage()
    {
        _serviceClient = new ServiceMock();
        Services = _serviceClient.GetAllServices();
        _inputService = new ServiceInputModel();
    }
    
    public void AddService(ServiceInputModel input)
    {
       var s= _serviceClient.AddService(input);
        Services.Add(s);
        StateHasChanged();
    }

    public void DeleteService(ServiceOutputModel service)
    {
        Services.Remove(service);
    }
}
>>>>>>> origin/Services
