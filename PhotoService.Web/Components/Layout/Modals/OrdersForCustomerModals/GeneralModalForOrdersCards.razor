@using PhotoService.DAL.DTO
@using PhotoService.BLL.IClients
@using PhotoService.BLL.Models
@using Microsoft.AspNetCore.Components
@using System.Security.Claims
@using System.Diagnostics.CodeAnalysis
@using Microsoft.AspNetCore.Components.Authorization
@using PhotoService.Web.Components.Layout.Cards
@using static PhotoService.BLL.IClients.IOrderClient
@inject IOrderClient OrderClient
@inject AuthenticationStateProvider AuthenticationStateProvider
@rendermode InteractiveServer

<button type="button" class="btn btn-primary button-modal" data-bs-toggle="modal" data-bs-target="#staticBackdrop">
    Подробнее о заказе
</button>

<div class="modal fade" id="staticBackdrop" data-bs-backdrop="static" data-bs-keyboard="false" tabindex="-1" aria-labelledby="staticBackdropLabel" aria-hidden="true">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h1 class="modal-title fs-5" id="staticBackdropLabel">Информация о заказе</h1>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Закрыть"></button>
            </div>
            <div class="modal-body">
                <p class="card-text mb-3 cancel-reason">
                    @Comment
                </p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-primary" data-bs-dismiss="modal">Понял</button>
            </div>
        </div>
    </div>
</div>

@code {

    [Parameter] 
    public string Comment { get; set; }

    [Parameter] 
    public string SelectedStatus { get; set; }
    [Parameter] 
    public DateTime? SelectedDate { get; set; }
    [Parameter] 
    public int UserId { get; set; }
    [Parameter] 
    public int Id { get; set; }

    private UsersDto _executor;
    private DateTime _creationDate;
    private string _comment;
    private string _serviceTitle;
    private string _executorName;
    private string _servicePrice;
    private string? _canceledReason;
    private string _status;

    private List<OrderOutputModel>? _orders;
    private readonly IOrderClient _orderClient = new OrderClient();

    protected override async Task OnInitializedAsync()
    {
        _comment = Comment;
        var authenticationState = await AuthenticationStateProvider.GetAuthenticationStateAsync();
        var user = authenticationState.User;

        if (user.Identity is not null && user.Identity.IsAuthenticated)
        {
            var userIdClaim = user.FindFirst(ClaimTypes.NameIdentifier);
            if (userIdClaim != null && int.TryParse(userIdClaim.Value, out int userId))
            {
                Id = userId;
                _orders = _orderClient.GetOrdersByCustomerIdAsync(Id);
            }
        }
    }

}